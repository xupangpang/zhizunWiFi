package com.zhizun.zhizunwifi.activity;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.zhizun.zhizunwifi.R;
import com.zhizun.zhizunwifi.adapter.ViewPagerAdapter;
import com.zhizun.zhizunwifi.utils.BaseUtils;
import com.zzad.media.InterFace.SplashListener;
import com.zzad.media.StartSDK;

import org.litepal.tablemanager.Connector;

import permissions.dispatcher.NeedsPermission;
import permissions.dispatcher.OnNeverAskAgain;
import permissions.dispatcher.OnPermissionDenied;
import permissions.dispatcher.OnShowRationale;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.RuntimePermissions;

@RuntimePermissions
public class WelcomeActivity extends Activity implements OnClickListener, OnPageChangeListener{

    private ViewPager vp;
    private ViewPagerAdapter vpAdapter;
    private List<View> views;
    private boolean IoDontAsk = false;

    //（分享热点到云端加密互助平台，请确认您是热点主人）  （不分享热点到云端加密互助平台）

    //引导图片资源
    private static final int[] pics = { R.drawable.guide1,
            R.drawable.guide2, R.drawable.guide3,R.drawable.guide4};

    //底部小店图片
    private ImageView[] dots;

    //记录当前选中位置
    private int currentIndex;
    private View child;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

       //9500广告初始化
        //StartSDK.initSDK(this);

        final String isGuide = BaseUtils.getSharedPreferences("isGuide", this);

        //判断是否是第一次打开应用
        if(isGuide != null && isGuide.equals("true")){
            Intent intent = new Intent(WelcomeActivity.this, MainTabActivity.class);
            startActivity(intent);
            finish();
        }else {
            setContentView(R.layout.activity_welcome);
            initGlobalPer();


            vp = (ViewPager) findViewById(R.id.viewpager);

            views = new ArrayList<View>();

            LinearLayout.LayoutParams mParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT);

            //初始化引导图片列表
            for (int i = 0; i < pics.length; i++) {
                ImageView iv = new ImageView(WelcomeActivity.this);
                iv.setLayoutParams(mParams);
                iv.setImageResource(pics[i]);
                iv.setScaleType(ScaleType.FIT_XY);
                views.add(iv);
            }

            LayoutInflater inflater = (LayoutInflater) WelcomeActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            child = inflater.inflate(R.layout.activity_splash, null);
            views.add(child);
            //初始化最后一张页面
            initChild(child);


            //初始化Adapter
            vpAdapter = new ViewPagerAdapter(views);
            vp.setAdapter(vpAdapter);
            //绑定回调
            vp.setOnPageChangeListener(WelcomeActivity.this);
        }

        /*
         开屏广告，必须在初始化之后调用
        */
       /* StartSDK.ShowAplash(this, new SplashListener() {
            @Override
            public void Finish() {
                //判断是否是第一次打开应用
                if(isGuide != null && isGuide.equals("true")){
                    Intent intent = new Intent(WelcomeActivity.this, MainTabActivity.class);
                    startActivity(intent);
                    finish();
                }else {
                    setContentView(R.layout.activity_welcome);
                    initGlobalPer();


                    vp = (ViewPager)findViewById(R.id.viewpager);

                    views = new ArrayList<View>();

                    LinearLayout.LayoutParams mParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                            LinearLayout.LayoutParams.WRAP_CONTENT);

                    //初始化引导图片列表
                    for(int i=0; i<pics.length; i++) {
                        ImageView iv = new ImageView(WelcomeActivity.this);
                        iv.setLayoutParams(mParams);
                        iv.setImageResource(pics[i]);
                        iv.setScaleType(ScaleType.FIT_XY);
                        views.add(iv);
                    }

                    LayoutInflater inflater = (LayoutInflater)WelcomeActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                    child = inflater.inflate(R.layout.activity_splash, null);
                    views.add(child);
                    //初始化最后一张页面
                    initChild(child);


                    //初始化Adapter
                    vpAdapter = new ViewPagerAdapter(views);
                    vp.setAdapter(vpAdapter);
                    //绑定回调
                    vp.setOnPageChangeListener(WelcomeActivity.this);


                }
            }
        });*/

    }


    private void initChild(View view){
        Button btn_reg_log = (Button)view.findViewById(R.id.btn_reg_log);
        final TextView version_name = (TextView)view.findViewById(R.id.version_name);
        btn_reg_log.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                BaseUtils.setSharedPreferences("isGuide", "true", WelcomeActivity.this);
                Intent intent = new Intent(WelcomeActivity.this, MainTabActivity.class);
                startActivity(intent);
                finish();
            }
        });
        CheckBox share_cb = (CheckBox)view.findViewById(R.id.share_cb);
        share_cb.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b)
                    version_name.setText("（分享热点到云端加密互助平台，请确认您是热点主人）");
                else
                    version_name.setText("（不分享热点到云端加密互助平台）");

            }
        });

    }

    /**
     *设置当前的引导页
     */
    private void setCurView(int position)
    {
        if (position < 0 || position >= pics.length) {
            return;
        }

        vp.setCurrentItem(position);
    }

    /**
     *这只当前引导小点的选中
     */
    private void setCurDot(int positon)
    {
        if (positon < 0 || positon > pics.length - 1 || currentIndex == positon) {
            return;
        }

        dots[positon].setEnabled(false);
        dots[currentIndex].setEnabled(true);

        currentIndex = positon;
    }

    //当滑动状态改变时调用
    @Override
    public void onPageScrollStateChanged(int arg0) {
        // TODO Auto-generated method stub

    }

    //当当前页面被滑动时调用
    @Override
    public void onPageScrolled(int arg0, float arg1, int arg2) {
        // TODO Auto-generated method stub

    }

    //当新的页面被选中时调用
    @Override
    public void onPageSelected(int arg0) {
        //设置底部小点选中状态
//        setCurDot(arg0);
       // System.out.println("position= " +arg0);

    }

    @Override
    public void onClick(View v) {
        int position = (Integer)v.getTag();
        setCurView(position);

    }

    private Handler handler = new Handler() {
        @SuppressLint("HandlerLeak")
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case 0:
                    Intent intent = new Intent(WelcomeActivity.this, MainTabActivity.class);
                    startActivity(intent);

                    finish();
                    break;
            }
        }
    };

    /**
     * 申请全局都需要的权限,如读写权限,这些权限是进入app就需要的,拒绝则警告用户程序可能会崩溃
     */
    private void initGlobalPer() {
        WelcomeActivityPermissionsDispatcher.sucessWithCheck(this);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[]
            grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        WelcomeActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);//将回调交给代理类处理
    }

    @NeedsPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    void sucess() {//权限申请成功

    }

    @OnShowRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    void showRationaleForCamera(PermissionRequest request) {
        showRationaleDialog("为了达到更好的用户体验,我们会进行缓存及文件存储操作,需要您授予相关的存储权限!\n请您放心,该权限为正常使用权限,不会涉及到您的隐私!\n稍后请点击弹出框的允许按钮", request);
    }

    @OnPermissionDenied(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    void onCameraDenied() {//被拒绝
        IToast("您拒绝了权限，可能会导致该应用内部发生错误,请尽快授权");
    }

    @OnNeverAskAgain(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    void onCameraNeverAskAgain() {//被拒绝并且勾选了不再提醒
        if (!IoDontAsk) AskForPermission();
    }

    /**
     * 再用户拒绝过一次之后,告知用户具体需要权限的原因
     *
     * @param messageResId
     * @param request
     */
    private void showRationaleDialog(String messageResId, final PermissionRequest request) {
        new AlertDialog.Builder(this)
                .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(@NonNull DialogInterface dialog, int which) {
                        request.proceed();//请求权限
                    }
                })
                .setTitle("请求权限")
                .setCancelable(false)
                .setMessage(messageResId)
                .show();
    }

    /**
     * 被拒绝并且不再提醒,提示用户去设置界面重新打开权限
     */
    private void AskForPermission() {
        new AlertDialog.Builder(this)
                .setTitle("缺少基础存储权限")
                .setMessage("当前应用缺少存储权限,请去设置界面授权.\n授权之后按两次返回键可回到该应用哦")
                .setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        IToast("您拒绝了权限，可能会导致该应用内部发生错误,请尽快授权");

                    }
                })
                .setNeutralButton("不在提醒", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        IoDontAsk = true;
                        IToast("将不再提醒请求基础权限,建议尽快授权");
                    }
                }).setPositiveButton("设置", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
                intent.setData(Uri.parse("package:" + getPackageName())); // 根据包名打开对应的设置界面
                startActivity(intent);
            }
        }).create().show();
    }

    private void IToast(String text){
        Toast.makeText(this,text,Toast.LENGTH_SHORT).show();
    }

}
