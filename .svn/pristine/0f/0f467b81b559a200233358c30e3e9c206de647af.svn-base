package com.zhizun.zhizunwifi.activity;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.duohuo.dhroid.ioc.annotation.InjectView;

import org.json.JSONException;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import cn.bmob.v3.BmobQuery;
import cn.bmob.v3.BmobUser;
import cn.bmob.v3.datatype.BmobFile;
import cn.bmob.v3.listener.FindListener;
import cn.bmob.v3.listener.GetListener;
import cn.bmob.v3.listener.SaveListener;
import cn.bmob.v3.listener.UpdateListener;
import cn.bmob.v3.listener.UploadFileListener;

import com.bmob.utils.BmobLog;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.zhizun.zhizunwifi.bean.WifiShop;
import com.zhizun.zhizunwifi.dialog.ActionSheetDialog;
import com.zhizun.zhizunwifi.dialog.ActionSheetDialog.OnSheetItemClickListener;
import com.zhizun.zhizunwifi.dialog.ActionSheetDialog.SheetItemColor;
import com.zhizun.zhizunwifi.dialog.StoreSelectDialog;
import com.zhizun.zhizunwifi.R;
import com.zhizun.zhizunwifi.utils.CreateBmpFactory;
import com.zhizun.zhizunwifi.widget.SelectPicPopupWindow;

/**
 *
 * @项目名: ZhizunWIFI
 * @包名: com.zhizun.zhizunwifi.activity
 * @类名: StoreWifiApply2
 * @创建者: 梁辉
 * @创建时间: 2016年3月17日 上午9:29:33
 * @描述: TODO
 *
 * @SVN版本: $Rev: 753 $
 * @更新人: $Author: fengzi $
 * @更新时间: $Date: 2016-05-05 15:52:22 +0800 (Thu, 05 May 2016) $
 * @更新描述: TODO
 */
public class StoreWifiApply2 extends BaseActivity implements OnClickListener {

	@InjectView(id = R.id.item_store_name)
	TextView item_store_name;
	@InjectView(id = R.id.et_name)
	EditText et_name;
	@InjectView(id = R.id.et_phone)
	EditText et_phone;
	@InjectView(id = R.id.store_select)
	TextView store_select;
	@InjectView(id = R.id.btn_next, click = "onClick")
	Button btn_next;
	@InjectView(id = R.id.rl, click = "onClick")
	RelativeLayout rl;
	@InjectView(id = R.id.rl2, click = "onClick")
	RelativeLayout rl2;

	private ImageView back;
	private ImageView licenseUpload;
	private ImageView license;
	private ImageView idcard;

	private TextView title;
	private TextView storeDialog;

	private final int CHECKBOX_REQUEST = 1;

	// 自定义的弹出框类
	SelectPicPopupWindow menuWindow;
	private CreateBmpFactory mCreateBmpFactory;
	private int TYPE = -1;
	private final int TYPE_LICENSE = 1; // 营业执照
	private final int TYPE_IDCARD = 2; // 身份证
	// 上传图片路径
	Map<String, String> map = new HashMap<String, String>();
	WifiShop muser;
	String ObjectId = null;
	WifiShop u =new WifiShop();;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_storewifiapply2);

		back = (ImageView) findViewById(R.id.headerLeft);
		title = (TextView) findViewById(R.id.headerTitle);
		storeDialog = (TextView) findViewById(R.id.store_select);
		licenseUpload = (ImageView) findViewById(R.id.upload_license);
		license = (ImageView) findViewById(R.id.license);
		idcard = (ImageView) findViewById(R.id.idcard);
		back.setOnClickListener(this);
		storeDialog.setOnClickListener(this);
		// licenseUpload.setOnClickListener(this);
		// license.setOnClickListener(this);

		title.setText("店铺认证信息填写");

		item_store_name
				.setText(getIntent().getStringExtra("currentSelectName"));
		mCreateBmpFactory = new CreateBmpFactory(this);
	}

	@Override
	protected void onResume() {
		super.onResume();
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		System.out.println("requestCode" + requestCode);
		if (requestCode == CreateBmpFactory.PHOTO_REQUEST_CAREMA /*
																 * && resultCode
																 * == 0 && data
																 * != null
																 */) {
			try {

				String bitmapFilePath = mCreateBmpFactory.getBitmapFilePath(
						requestCode, resultCode, data, true);
				if (bitmapFilePath != null) {
					Bitmap bitmap = BitmapFactory.decodeFile(bitmapFilePath
							.toString());
					if (bitmap != null) {
						if (TYPE == TYPE_LICENSE) {
							// uploadAvatar(bitmapFilePath.toString(), license,
							// TYPE);
							license.setImageBitmap(bitmap);
						} else {
							// uploadAvatar(bitmapFilePath.toString(), idcard,
							// TYPE);
							idcard.setImageBitmap(bitmap);
						}
						map.put(TYPE + "", bitmapFilePath);
					}
				}
			} catch (JSONException e) {
				e.printStackTrace();
			}
		} else if (requestCode == CreateBmpFactory.PHOTO_REQUEST_GALLERY
				&& resultCode == RESULT_OK && data != null) {
			try {
				String bitmapFilePath = mCreateBmpFactory.getBitmapFilePath(
						requestCode, resultCode, data, true);
				Uri uri = data.getData();
				if (uri != null) {
					// to do find the path of pic
					Bitmap bitmap = MediaStore.Images.Media.getBitmap(
							this.getContentResolver(), uri);
					if (TYPE == TYPE_LICENSE) {
						// uploadAvatar(bitmapFilePath, license, TYPE);
						license.setImageBitmap(bitmap);
					} else {
						// uploadAvatar(bitmapFilePath, idcard, TYPE);
						idcard.setImageBitmap(bitmap);
					}
					map.put(TYPE + "", bitmapFilePath);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		if (requestCode == CHECKBOX_REQUEST && resultCode == RESULT_OK && data != null) {
			String typeResult = data.getStringExtra("result");
			storeDialog.setText(typeResult);

		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	private void uploadAvatar(String path, final int type) {
		BmobLog.i("头像地址：" + path);
		final BmobFile bmobFile = new BmobFile(new File(path));
		bmobFile.upload(this, new UploadFileListener() {
			@Override
			public void onSuccess() {
				String url = bmobFile.getFileUrl(StoreWifiApply2.this);
				// 更新BmobUser对象
				updateUserAvatar(url, type);
			}

			@Override
			public void onProgress(Integer arg0) {
				// TODO Auto-generated method stub
			}

			@Override
			public void onFailure(int arg0, String msg) {
				// TODO Auto-generated method stub
				// ShowToast("头像上传失败：" + msg);
			}
		});
	}

	private void updateUserAvatar(final String url, int type) {
		// uploadAvatar(shop_url);

		if (type == TYPE_LICENSE) {
			u.setShop_image(url);
			u.setWifi_name(getIntent().getStringExtra("wifi_name"));
			u.setWifi_psw(getIntent().getStringExtra("wifi_psw"));
			u.setWifi_mac_address(getIntent()
					.getStringExtra("wifi_mac_address"));
			u.setLatitude(getIntent().getStringExtra("latitude"));
			u.setLongitude(getIntent().getStringExtra("longitude"));

			u.setUser_name(et_name.getText().toString());
			u.setShop_name(item_store_name.getText().toString());
			u.setPhone(et_phone.getText().toString());
			u.setShop_type(storeDialog.getText().toString());

			// 注意：不能调用gameScore.setObjectId("")方法
			u.save(StoreWifiApply2.this, new SaveListener() {

				@Override
				public void onSuccess() {
					// toast("添加数据成功，返回objectId为："+gameScore.getObjectId() +
					ObjectId = u.getObjectId();
					// ”,数据在服务端的创建时间为：“ + gameScore.getCreatedAt());

				}

				@Override
				public void onFailure(int code, String arg0) {
					// 添加失败
				}
			});
		} else {
			String id = ObjectId;
			WifiShop gameScore = new WifiShop();
			gameScore.setUser_image(url);
			gameScore.update(this, ObjectId, new UpdateListener() {

				@Override
				public void onSuccess() {
					// TODO Auto-generated method stub
//	    	        Log.i("bmob","更新成功：");
					Toast.makeText(StoreWifiApply2.this, "提交成功，请等待管理员审核", 1)
							.show();
					finish();
				}

				@Override
				public void onFailure(int code, String msg) {
					// TODO Auto-generated method stub
//	    	        Log.i("bmob","更新失败："+msg);
				}
			});
//			BmobQuery<WifiShop> query = new BmobQuery<WifiShop>();
//			query.getObject(this, ObjectId, new GetListener<WifiShop>() {
//
//			    @Override
//			    public void onSuccess(WifiShop object) {
//			        // TODO Auto-generated method stub
////			        toast("查询成功：");
////			        //获得playerName的信息
////			        object.getPlayerName();
////			        //获得数据的objectId信息
////			        object.getObjectId();
////			        //获得createdAt数据创建时间（注意是：createdAt，不是createAt）
////			        object.getCreatedAt();
//
//			    }
//
//			    @Override
//			    public void onFailure(int code, String arg0) {
//			        // TODO Auto-generated method stub
////			        toast("查询失败："+arg0);
//			    }
//
//			});

//
//			u.setUser_image(url);
//			updateUserData(u, new UpdateListener() {
//				@Override
//				public void onSuccess() {
//					// TODO Auto-generated method stub
//					// ShowToast("头像更新成功！");
//					// 更新头像
//					// refreshAvatar(url, imageView);
//					Toast.makeText(StoreWifiApply2.this, "提交成功，请等待管理员审核", 1)
//							.show();
//					finish();
//				}
//
//				@Override
//				public void onFailure(int code, String msg) {
//					// TODO Auto-generated method stub
//					// ShowToast("头像更新失败：" + msg);
//				}
//			});
		}

	}

	private WifiShop initOtherData(String name) {
		BmobQuery<WifiShop> query = new BmobQuery<WifiShop>();
		query.addWhereEqualTo("wifi_name", name);
		query.findObjects(StoreWifiApply2.this, new FindListener<WifiShop>() {
			@Override
			public void onSuccess(List<WifiShop> arg0) {
				// TODO Auto-generated method stub
				// toast("查询用户成功："+object.size());
				if (arg0 != null && arg0.size() > 0) {
					muser = (WifiShop) arg0.get(0);
					// updateUser(user);

				} else {
					// ShowLog("onSuccess 查无此人");
				}
			}

			@Override
			public void onError(int code, String msg) {
				// TODO Auto-generated method stub
				// toast("查询用户失败："+msg);
			}
		});
		return muser;
	}

	/**
	 * 更新头像 refreshAvatar
	 *
	 * @return void
	 * @throws
	 */
	private void refreshAvatar(String avatar, ImageView imageView) {
		if (avatar != null && !avatar.equals("")) {
			// ImageLoader.getInstance().displayImage(avatar, iv_set_avator,
			// ImageLoadOptions.getOptions());
			// 加载图片
			ImageLoader.getInstance().displayImage(avatar, imageView);
		} else {
			imageView
					.setImageResource(R.drawable.ic_user_homepage_photo_default);
		}
	}

	private void updateUserData(WifiShop user, UpdateListener listener) {
		user.setObjectId(BmobUser.getCurrentUser(StoreWifiApply2.this,
				WifiShop.class).getObjectId());
		user.update(this, listener);
	}

	@Override
	public void onClick(View v) {

		switch (v.getId()) {
			case R.id.headerLeft:
				finish();
				break;

			case R.id.store_select:
				Intent intent = new Intent(this, StoreSelectDialog.class);
				startActivityForResult(intent, CHECKBOX_REQUEST);
				break;
			case R.id.license:
				// 实例化SelectPicPopupWindow
				menuWindow = new SelectPicPopupWindow(this, itemsOnClick);
				// 显示窗口
				menuWindow.showAtLocation(this.findViewById(R.id.rootview),
						Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0); // 设置layout在PopupWindow中显示的位置
				break;
			case R.id.btn_next:
				if (map.get(TYPE_LICENSE + "").equals("")
						|| map.get(TYPE_LICENSE + "") == null
						|| map.get(TYPE_IDCARD + "").equals("")
						|| map.get(TYPE_IDCARD + "") == null
						|| et_name.getText().toString().equals("")
						|| item_store_name.getText().toString().equals("")
						|| et_phone.getText().toString().equals("")) {
					Toast.makeText(StoreWifiApply2.this, "请上传有信息", 1).show();
				} else {
					uploadAvatar(map.get(TYPE_LICENSE + ""), TYPE_LICENSE);
					uploadAvatar(map.get(TYPE_IDCARD + ""), TYPE_IDCARD);
				}
				// updateUserAvatar(map.get(TYPE_LICENSE+""),map.get(TYPE_IDCARD+""));
				break;
			case R.id.rl:
				TYPE = TYPE_LICENSE;
				showDialog();
				break;
			case R.id.rl2:
				TYPE = TYPE_IDCARD;
				showDialog();
				break;

		}
	}

	private void showDialog() {
		new ActionSheetDialog(StoreWifiApply2.this)
				.builder()
				.setCancelable(false)
				.setCanceledOnTouchOutside(false)
				.addSheetItem("拍照", SheetItemColor.Black,
						new OnSheetItemClickListener() {
							@Override
							public void onClick(int which) {
								mCreateBmpFactory.OpenCamera();
							}
						})
				.addSheetItem("从手机相册选择", SheetItemColor.Black,
						new OnSheetItemClickListener() {
							@Override
							public void onClick(int which) {
								mCreateBmpFactory.OpenGallery();
							}
						}).show();
	}

	// 为弹出窗口实现监听类
	private OnClickListener itemsOnClick = new OnClickListener() {

		public void onClick(View v) {
			menuWindow.dismiss();
			switch (v.getId()) {
				case R.id.tv_lm_camera:
					System.out.println("相机");
					break;
				case R.id.tv_lm_picture:
					System.out.println("图库");
					break;
				default:
					break;
			}
		}
	};

}
